@use 'sass:map';
@use '_variables' as var;

.jpdb-word {
  @include var.font-sizes;
  @include var.word-colors;

  @include var.pitch;
  @include var.parsed-text-decoration;
  @include var.misparsed;
  @include var.rt;
}

.jpdb-word {
  rt {
    color: var(--jpdb-rt-color);
    font-size: var(--jpdb-rt-font-size);
    display: var(--jpdb-rt-display);

    user-select: var(--jpdb-rt-user-select);
    pointer-events: var(--jpdb-rt-pointer-events);
  }

  &:hover rt {
    display: var(--jpdb-rt-display--hover);
  }
}

.jpdb-word:not(.unparsed) {
  text-decoration: var(--jpdb-word-parsed-text-decoration);

  &:hover {
    text-decoration: var(--jpdb-word-parsed-text-decoration--hover);
  }
}

.jpdb-word.misparsed {
  color: var(--jpdb-word-misparsed-color, var(--jpdb-word-default-color));
  background-color: var(--jpdb-word-misparsed-background-color);
  text-decoration: var(--jpdb-word-misparsed-text-decoration);
  text-decoration-color: var(--jpdb-word-misparsed-text-decoration-color);
}

.jpdb-word {
  @each $pitch in var.$pitch-colors {
    &.#{$pitch} {
      text-decoration: var(--jpdb-pitch-text-decoration);
      text-decoration-color: var(--jpdb-pitch-#{$pitch}, var(--jpdb-pitch-default-color));
    }
  }
}

.jpdb-word {
  @each $state in var.$word-colors {
    &.#{$state} {
      color: var(--jpdb-word-#{$state}, var(--jpdb-word-default-color));
    }
  }
}
